package com.hms.helper;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.hms.dao.DoctorDao;
import com.hms.exception.UsernameAlreadyExistsException;
import com.hms.exceptionmapper.HmsBusinessException;
import com.hms.exceptionmapper.HmsSystemException;
import com.hms.model.Doctor;
import com.hms.model.Patient;

/**
 *
 * This Class is used to provide different helper methods to the Delegate layer
 * primarily the DoctorDelegate Class.
 *
 * @author Rahul.
 *
 */
public class DoctorHelper {

	private static final Logger LOGGER = LogManager.getLogger(DoctorHelper.class);

	/**
	 *
	 * This method passes the input as a doctor to the DoctorDao and gets the
	 * database created Doctor in return.
	 *
	 * @param doctor object from createDoctor Delegate method.
	 * @return doctor object generated by createDoctor DAO method.
	 * @throws HmsBusinessException generic client exception.
	 * @throws HmsSystemException   generic system exception.
	 */
	public static Doctor createDoctor(Doctor doctor) throws HmsBusinessException, HmsSystemException {
		LOGGER.traceEntry(doctor.getUsername());
		try {
			Doctor createdDoctor = DoctorDao.createDoctor(doctor);
			// FIX : USE SEPARATE BEAN OR IGNORE PASSWORD
			createdDoctor.setPassword(null);
			LOGGER.traceExit(createdDoctor.toString());
			return createdDoctor;
		} catch (UsernameAlreadyExistsException e) {
			LOGGER.warn("User cannot be added: " + e.getMessage());
			throw new HmsBusinessException(e.getMessage());
		} catch (Exception e) {
			LOGGER.debug("System Error Occured.");
			throw new HmsSystemException("System Fail");
		}
	}

	/**
	 * Outputs all the doctors from the DAO method.
	 *
	 * @return list of doctors to the delegate layer.
	 * @throws HmsBusinessException generic Client Exception.
	 * @throws HmsSystemException   generic Business Exception.
	 */
	public static List<Doctor> readDoctors() throws HmsBusinessException, HmsSystemException {
		LOGGER.traceEntry();
		List<Doctor> doctors = null;
		try {
			doctors = DoctorDao.readDoctors();
		} catch (SQLException e) {
			throw new HmsSystemException("SQL error: " + e.getMessage());
		} catch (Exception e) {
			throw new HmsSystemException("System Error: " + e.getMessage());
		}
		if (doctors == null) {
			throw new HmsBusinessException("No users found.");
		}

		LOGGER.traceExit(doctors.toString());
		return doctors;
	}

	/**
	 * Outputs all the doctors from the DAO method.
	 *
	 * @param id of the doctor.
	 * @return doctor with userId = id to the delegate layer.
	 * @throws HmsBusinessException client exception.
	 * @throws HmsSystemException   system failure exception.
	 */
	public static Doctor readDoctor(int id) throws HmsBusinessException, HmsSystemException {
		LOGGER.traceEntry(Integer.toString(id));
		Doctor doctor = null;
		try {
			doctor = DoctorDao.readDoctor(id);
			if (doctor != null) {
				doctor.setPassword(null);
			}
		} catch (SQLException e) {
			LOGGER.debug("SQL error occurred: " + e.getMessage());
			throw new HmsSystemException("SQL exception occured");
		} catch (Exception e) {
			LOGGER.debug("System Fail: " + e.getMessage());
			throw new HmsSystemException("System failed");
		}
		if (doctor == null) {
			LOGGER.warn("User cannot be read");
			throw new HmsBusinessException("User doesnot exist.");
		}
		LOGGER.traceExit(doctor.toString());
		return doctor;
	}

	/**
	 * This method is used to delete a given doctor's info in the DAO.
	 *
	 * @param doctor who needs to be deleted.
	 * @return true if doctor deleted else false.
	 * @throws HmsSystemException   generic system exception.
	 * @throws HmsBusinessException generic client exception.
	 */
	public static boolean deleteDoctor(Doctor doctor) throws HmsSystemException, HmsBusinessException {
		LOGGER.traceEntry(doctor.toString());
		boolean status;
		try {
			status = DoctorDao.deleteDoctor(doctor.getUserId());
		} catch (SQLException e) {
			LOGGER.debug("Some SQL error occured: " + e.getMessage());
			throw new HmsSystemException("SQL Exception Ocurred: " + e.getMessage());
		} catch (Exception e) {
			LOGGER.debug("System Failed: " + e.getMessage());
			throw new HmsSystemException("System Error");
		}
		if (!status) {
			LOGGER.warn("User is not found to delete.");
			throw new HmsBusinessException("User with Id not found.");
		}
		LOGGER.traceExit(status);
		return status;
	}

	/**
	 *
	 * @param id of the doctor.
	 * @return List of patients of that doctor.
	 * @throws HmsBusinessException generic Client Exception.
	 * @throws HmsSystemException   generic System Exception.
	 */
	public static List<Patient> getPatientsForDoctor(int id) throws HmsBusinessException, HmsSystemException {
		LOGGER.traceEntry(Integer.toString(id));
		List<Patient> patients = null;

		try {
			patients = DoctorDao.getPatientsForDoctor(id);
		} catch (SQLException e) {
			LOGGER.debug("Some SQL error occured: " + e.getMessage());
			throw new HmsSystemException("SQL Error: " + e.getMessage());
		} catch (Exception e) {
			LOGGER.debug("System Failed: " + e.getMessage());
			throw new HmsSystemException("System Error: " + e.getMessage());
		}

		if (patients.size() == 0) {
			LOGGER.warn("No Patients Found");
			throw new HmsBusinessException("No Patients Found.");
		}
		LOGGER.traceExit(patients.toString());
		return patients;

	}

	/**
	 *
	 * @return map of doctors and list of patients.
	 * @throws HmsSystemException   generic System Exception.
	 * @throws HmsBusinessException generic client Exception.
	 */
	public static Map<Integer, List<Patient>> getPatientsForAllDoctors()
			throws HmsSystemException, HmsBusinessException {
		LOGGER.traceEntry();
		Map<Integer, List<Patient>> map = null;
		try {
			map = DoctorDao.getPatientsForAllDoctors();
		} catch (SQLException e) {
			LOGGER.debug("Some SQL error occured: " + e.getMessage());
			throw new HmsSystemException("SQL Error: " + e.getMessage());
		} catch (Exception e) {
			LOGGER.debug("System Failed: " + e.getMessage());
			throw new HmsSystemException("System Error: " + e.getMessage());
		}
		if (map == null) {
			throw new HmsBusinessException("No Users Found.");
		}
		LOGGER.traceExit(map.toString());
		return map;
	}
}
