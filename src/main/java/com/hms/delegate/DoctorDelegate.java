package com.hms.delegate;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.hms.exception.ServerConnectionFailedException;
import com.hms.exception.UserNotFoundException;
import com.hms.exception.UsernameAlreadyExistsException;
import com.hms.exceptionmapper.HmsBusinessException;
import com.hms.exceptionmapper.HmsSystemException;
import com.hms.helper.DoctorHelper;
import com.hms.model.Doctor;
import com.hms.model.Patient;

/**
 *
 * This class contains all the business logic for fulfilling the requests of
 * DoctorApi class.
 *
 * @author Rahul
 *
 */
public class DoctorDelegate {
	private static final Logger LOGGER = LoggerFactory.getLogger(DoctorDelegate.class);

	private DoctorHelper doctorHelper = new DoctorHelper();

	/**
	 * This method calls the createDoctor Helper method.
	 *
	 * @param doctor object.
	 * @return doctor object generated by createDoctor DAO method.
	 * @throws UsernameAlreadyExistsException from createDoctor DAO method.
	 * @throws HmsSystemException             Generic System exception.
	 */
	public Doctor createDoctor(Doctor doctor) throws UsernameAlreadyExistsException, HmsSystemException {
		LOGGER.info("Enter the createDoctor Delegate method with doctor object with username: " + doctor.getUsername());
		Doctor createdDoctor;
		try {
			createdDoctor = doctorHelper.createDoctor(doctor);
			LOGGER.info("Enter the createPatient Delegate method with doctor object with userid: "
					+ createdDoctor.getUserId());
			return createdDoctor;
		} catch (ServerConnectionFailedException e) {
			throw new HmsSystemException("Something went wrong, try after some time");
		}

	}

	/**
	 * Outputs a list of Doctor objects.
	 *
	 * @return list of Doctors.
	 * @throws HmsBusinessException Generic Client exception.
	 */
	public List<Doctor> readDoctors() throws HmsBusinessException {
		LOGGER.info("Enter the readDoctors Delegate method");
		List<Doctor> doctors;
		try {
			doctors = doctorHelper.readDoctors();
		} catch (UserNotFoundException e) {
			throw new HmsBusinessException("No users found.");
		}
		LOGGER.info("Exit the readDoctors Delegate method");
		return doctors;
	}

	/**
	 * Outputs a of doctor object with userId = id.
	 *
	 * @param id userId from doctorService.
	 * @return doctor with userId = id.
	 * @throws HmsBusinessException Generic Client exception.
	 */
	public Doctor readDoctor(int id) throws HmsBusinessException {
		LOGGER.info("Enter the readDoctor Delegate method with id: " + id);
		Doctor doctor = null;
		try {
			doctor = doctorHelper.readDoctor(id);
		} catch (UserNotFoundException e) {
			throw new HmsBusinessException("User with given id not found.");
		}
		LOGGER.info("Exit the readDoctor Delegate method");
		if (doctor == null) {
			throw new HmsBusinessException("User with given id not found.");
		}
		return doctor;
	}

	/**
	 * This method is used to delete a given doctor in the Helper.
	 *
	 * @param doctor who needs to be delete.
	 * @return true if doctor deleted else throw an exception.
	 */
	public boolean deleteDoctor(Doctor doctor) {
		LOGGER.info("Entered the deleteDoctor Helper method with id: " + doctor.getUserId());
		boolean status = doctorHelper.deleteDoctor(doctor);
		if (status) {
			LOGGER.info("Exited the deleteDoctor Helper method");
			return status;
		} else {
//			Exception should be thrown.
			return false;
		}
	}

	/**
	 * This method takes doctorId as input and return list of patients under that
	 * doctor.
	 *
	 * @param id of the doctor.
	 * @return list of patients.
	 */
	public List<Patient> getPatientsForADoctor(int id) {
		String ids = doctorHelper.getPatientsIdForAGivenDoctorId(id);
		LOGGER.error(ids);
		List<Patient> patients = doctorHelper.getPatientsWithIds(ids);
		return patients;
	}
}
