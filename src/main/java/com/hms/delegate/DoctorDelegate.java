package com.hms.delegate;

import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.hms.exceptionmapper.HmsBusinessException;
import com.hms.exceptionmapper.HmsSystemException;
import com.hms.helper.DoctorHelper;
import com.hms.model.Doctor;
import com.hms.model.Patient;

/**
 *
 * This class contains all the business logic for fulfilling the requests of
 * DoctorApi class.
 *
 * @author Rahul
 *
 */
public class DoctorDelegate {
	private static final Logger LOGGER = LogManager.getLogger(DoctorDelegate.class);

	/**
	 * This method calls the createDoctor Helper method.
	 *
	 * @param doctor object.
	 * @return doctor object generated by createDoctor DAO method.
	 *
	 * @throws HmsSystemException   Generic System exception.
	 * @throws HmsBusinessException generic client exception.
	 */
	public static Doctor createDoctor(Doctor doctor) throws HmsSystemException, HmsBusinessException {
		LOGGER.traceEntry(doctor.toString());
		Doctor createdDoctor = DoctorHelper.createDoctor(doctor);
		LOGGER.traceExit(createdDoctor.toString());
		return createdDoctor;

	}

	/**
	 * Outputs a list of Doctor objects.
	 *
	 * @return list of Doctors.
	 * @throws HmsBusinessException Generic Client exception.
	 * @throws HmsSystemException   Generic System Exception.
	 */
	public static List<Doctor> readDoctors() throws HmsBusinessException, HmsSystemException {
		LOGGER.traceEntry();
		List<Doctor> doctors = DoctorHelper.readDoctors();
		LOGGER.traceExit(doctors.toString());
		return doctors;
	}

	/**
	 * Outputs a of doctor object with userId = id.
	 *
	 * @param id userId from doctorService.
	 * @return doctor with userId = id.
	 * @throws HmsBusinessException Generic Client exception.
	 * @throws HmsSystemException   generic system exception.
	 */
	public static Doctor readDoctor(int id) throws HmsBusinessException, HmsSystemException {
		LOGGER.traceEntry(Integer.toString(id));
		Doctor doctor = null;
		doctor = DoctorHelper.readDoctor(id);
		LOGGER.traceExit(doctor.toString());
		return doctor;
	}

	/**
	 * This method is used to delete a given doctor in the Helper.
	 *
	 * @param doctor who needs to be delete.
	 * @return true if doctor deleted else throw an exception.
	 * @throws HmsBusinessException generic client exception.
	 * @throws HmsSystemException   generic system exception.
	 */
	public static boolean deleteDoctor(Doctor doctor) throws HmsBusinessException, HmsSystemException {
		LOGGER.traceEntry(doctor.toString());
		boolean status = DoctorHelper.deleteDoctor(doctor);
		LOGGER.traceExit(status);
		return status;
	}

	/**
	 *
	 * @param id of the doctor.
	 * @return List of patients for that doctor.
	 * @throws HmsBusinessException Generic Client Exception.
	 * @throws HmsSystemException   Generic System Exception.
	 */
	public static List<Patient> patientsForDoctor(int id) throws HmsBusinessException, HmsSystemException {
		LOGGER.traceEntry(Integer.toString(id));
		List<Patient> patients = DoctorHelper.getPatientsForDoctor(id);
		LOGGER.traceExit(patients.toString());
		return patients;
	}

	/**
	 *
	 * @return Map of patients and doctors.
	 * @throws HmsSystemException   Generic System exception.
	 * @throws HmsBusinessException Generic Client Exception.
	 */
	public static Map<Integer, List<Patient>> patientsForDoctors() throws HmsSystemException, HmsBusinessException {
		LOGGER.traceEntry();
		Map<Integer, List<Patient>> map = DoctorHelper.getPatientsForAllDoctors();
		LOGGER.traceExit(map.toString());
		return map;
	}
}
